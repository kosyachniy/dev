import json
import random

import googlemaps

from coords2dist import coords2dist


with open('keys.json', 'r') as file:
	KEY = json.loads(file.read())['google']['maps']['key']

with open('categories.json', 'r') as file:
	CATEGORIES = json.loads(file.read())

gmaps = googlemaps.Client(key=KEY)


def handler(emojis, time, geo):
	points = [{
		'geo': geo,
		'delta': 0,
	}]

	# –í—ã–±–æ—Ä–∫–∞ —ç–º–æ–¥–∑–∏

	emojis = list(emojis)

	o = 0
	while len(emojis) > o:
		if emojis[o] not in CATEGORIES:
			del emojis[o]
		else:
			o += 1

	random.shuffle(emojis)

	# –í—Ä–µ–º—è –≤ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ

	# ! –£—á–∏—Ç—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ
	radius = 2.5 * time # m/min * min -> geo dist / count of places # 85 m/min

	#

	for emoji in emojis:
		# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø—É—Ç—å

		if len(points) > 3:
			break

		# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

		category = CATEGORIES[emoji]

		# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –º–µ—Å—Ç–∞

		places = gmaps.places_nearby(
			location=(geo['lat'], geo['lng']),
			radius=radius,
			keyword = category,
		)['results']


		o = 0
		while len(places) > o:
			# –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–æ —Ç–∞–∫–æ–µ –º–µ—Å—Ç–æ

			for point in points:
				if places[o]['geometry']['location'] == point['geo']:
					del places[o]
					continue

			# –ï—Å–ª–∏ –º–µ—Å—Ç–æ –≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ

			if len(points) > 1 and (
				coords2dist(
					(
						points[-2]['geo']['lat'],
						points[-2]['geo']['lng']
					), (
						places[o]['geometry']['location']['lat'],
						places[o]['geometry']['location']['lng']
					)
				) <= coords2dist(
					(
						points[-1]['geo']['lat'],
						points[-1]['geo']['lng']
					), (
						places[o]['geometry']['location']['lat'],
						places[o]['geometry']['location']['lng']
					)
				)):
				del places[o]
				continue

			#

			if len(points) >= 1:
				t = False

				for point in points:
					delta = coords2dist(
						(
							point['geo']['lat'],
							point['geo']['lng']
						), (
							places[o]['geometry']['location']['lat'],
							places[o]['geometry']['location']['lng']
						)
					)

					# –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π

					if delta <= point['delta']:
						t = True

					# –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ

					if delta <= time * 1.5: # 90 m/min -> m/h
						t = True

				if t:
					del places[o]
					continue

			#

			o += 1

		# –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞

		if not len(places):
			continue

		# –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–∞

		place = places[random.randint(0, len(places)-1)]

		# –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ

		geo = place['geometry']['location']

		# –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–ª—å—Ç—ã (–¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –∏–¥—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ)

		for i in range(len(points)):
			points[i]['delta'] = coords2dist(
				(
					points[i]['geo']['lat'],
					points[i]['geo']['lng']
				), (
					place['geometry']['location']['lat'],
					place['geometry']['location']['lng']
				)
			)

		#

		points.append({
			'id': place['place_id'],
			'name': place['name'],
			'geo': place['geometry']['location'],
			'emoji': emoji,
			'delta': 0,
		})
	
	print(json.dumps(points, ensure_ascii=False, indent='\t'))

	return points[1:]


if __name__ == '__main__':
	print(handler('üç©üåÉüç∫üçΩüõè', 180, {'lat': 47.390325, 'lng': 8.515934}))